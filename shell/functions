# Search file from everywhere
# Need fzf installed
# Usage: lcf plymouth.conf
lcf() {
	locate $*|fzf --ansi --exact --no-sort --reverse --tiebreak=index --bind "ctrl-m:execute: echo '{}'| clipcopy"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clean the current directory
# Credit : https://github.com/yyx990803/dotfiles
clean() {
	echo -n "remove everything here? (y/N)"
	read yn
	if [ $yn = "y" ]; then
			rmtrash -rf ./.* ./*
	fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check processes using a port
# Need lsof installed
port() {
	sudo lsof -iTCP:$1 -sTCP:LISTEN
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Credit from https://github.com/garybernhardt/dotfiles
# Activate the closest virtualenv by looking in parent directories.
activate_virtualenv() {
	if [ -f venv/bin/activate ]; then . venv/bin/activate;
	elif [ -f ../venv/bin/activate ]; then . ../venv/bin/activate;
	elif [ -f ../../venv/bin/activate ]; then . ../../venv/bin/activate;
	elif [ -f ../../../venv/bin/activate ]; then . ../../../venv/bin/activate;
	fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Transform characters from latin to ascii
# Credit : Christophe Blaess in " Shells Unix et Linux par la pratique"
# usage: echo "Caractères accentués en français" | lt-ascii
# result: Caracteres accentues en francais
lt-ascii() {
	sed -e 's/[ÀÁÂÃÄÅ]/A/g'|
	sed -e 's/Æ/AE/g'      |
	sed -e 's/Ç/C/g'       |
	sed -e 's/[ÈÉÊË]/E/g'  |
	sed -e 's/[ÌÍÎÏ]/I/g'  |
	sed -e 's/Ñ/N/g'       |
	sed -e 's/[ÒÓÔÕÖØ]/O/g'|
	sed -e 's/[ÙÚÛÜ]/U/g'  |
	sed -e 's/ Ý /Y/g'     |
	sed -e 's/[àáâãä]/a/g' |
	sed -e 's/æ/ae/g'      |
	sed -e 's/ç/c/g'       |
	sed -e 's/[èéêë]/e/g'  |
	sed -e 's/[ìíîï]/i/g'  |
	sed -e 's/ñ/n/g'       |
	sed -e 's/[òóôöø]/o/g' |
	sed -e 's/[ùúûü]/u/g'  |
	sed -e 's/ ý /y/g'
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# tre is a shorthand for tree
tre() { tree -aC -I '.git|node_modules|vendor|.idea|.vscode|*venv' --dirsfirst "$@" | less -FRNX; }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Clone projet from git repo
# Inspired from https://justin.abrah.ms/dotfiles/zsh.html
# usage : clone https://github.com/rails/rails
clone() {
	local USER=$(echo $@ | tr "/" " " | awk '{print $3}')
	local REPO=$(echo $@ | tr "/" " " | awk '{print $4}')
	git clone --depth 1 $@  ${REPO}@${USER} && \
	cd ${REPO}@${USER}
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Retry until it will work.
# usage : retry ping -c 5 8.8.8.8
retry() {
	echo "Retrying $@"
	until $@; do
		sleep 1
	done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Colored man pages
# credit https://github.com/robbyrussel/oh-my-zsh/plugins/colored-man-pages
man() {
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;40;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
		PAGER="${commands[less]:-$PAGER}" \
		_NROFF_U=1 \
		PATH="$HOME/bin:$PATH" \
			man "$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# take a repo and copy it to somewhere else minus the .git stuff.
# credit to github.com/nicknisi/dotfiles
gitexport() {
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Crypt with gpg

# Crypt with my public key
# e.g: crypt4me Fichier
# See $GPGKEY in global file
crypt4me(){ gpg --recipient $GPGKEY --sign --encrypt $1 }

# e.g: crypt4 '@igorvisi' password.txt
crypt4() { gpg --recipient $1 --sign --encrypt $2 }

# Crypt with password
crypt() {gpg -c $1}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Backup somefiles with archives : tar and gzip
archive() { tar zcvf $1.`date --rfc-3339=date`.bak.tar.gz $1/ }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#Create a directory and enter it
mc () { mkdir -p "$@" && cd "$@"}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# ARCHIVE COMPRESS
compress() {
	if [[ -n "$1" ]]; then
		FILE=$1
		case $FILE in
			*.tar ) shift && tar cf $FILE $* ;;
			*.tar.bz2 ) shift && tar cjf $FILE $* ;;
			*.tar.gz ) shift && tar czf $FILE $* ;;
			*.tgz ) shift && tar czf $FILE $* ;;
			*.zip ) shift && zip $FILE $* ;;
			*.rar ) shift && rar $FILE $* ;;
			* ) shift && tar zcvf $FILE.tar.gz $* ;;
		esac
	else
	echo "usage: compress <foo.tar.gz> ./foo ./bar"
	fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}


add_github_keys_to_server() {
    # Vérifier que les arguments sont fournis
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
        echo "Usage: add_github_keys_to_server <github_username> <server_username> <server_ip>"
        return 1
    fi

    github_username="$1"
    server_username="$2"
    server_ip="$3"

    # Télécharger les clés SSH depuis GitHub et les ajouter au serveur
    curl -s "https://github.com/$github_username.keys" | ssh "$server_username@$server_ip" "
        mkdir -p ~/.ssh && chmod 700 ~/.ssh &&
        cat >> ~/.ssh/authorized_keys &&
        chmod 600 ~/.ssh/authorized_keys
    "

    # Vérifier si la commande a réussi
    if [ $? -eq 0 ]; then
        echo "Les clés SSH de $github_username ont été ajoutées avec succès à $server_username@$server_ip."
    else
        echo "Erreur : Impossible d'ajouter les clés SSH."
        return 1
    fi
}
